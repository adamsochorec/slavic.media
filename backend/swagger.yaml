openapi: 3.0.0
info:
  title: slavic.media/blog
  description: MongoDB ExpressJS NodeJS REST API
  version: 1.0.0
servers:
  # Local
  - url: http://localhost:4000/
    description: Local backend
  - url: http://localhost:5173/
    description: Local frontend
  # Deployed
  - url: https://dev.slavic.media
    description: Deployed frontend
  - url: https://api.slavic.media
    description: Deployed backend
components:
  securitySchemes:
    ApiKeyAuth: # arbitrary name for the security scheme
      type: apiKey
      in: header # can be "header", "query" or "cookie"
      name: auth-token

  schemas:
    article:
      type: object
      properties:
        ID:
          type: string
        title:
          type: string
        content:
          type: string
        author:
          type: string
        date:
          type: string
        thumbnail:
          type: string

    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        date:
          type: string

paths:
  /user/register:
    post:
      summary: Register a new User
      description: Register a new User in the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  _ID:
                    type: string

  /user/login:
    post:
      summary: Login a User
      description: Login a User to get a JWT token (auth-token)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  data:
                    type: string

  /blog:
    get:
      summary: Fetches all documents from the server
      description: Retrieves a list of documents as JSON objects
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: A list of JSON objects in an array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/article"
    post:
      summary: Create a new document
      description: Creates a new document and sends it to the server for storage.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/article"
      responses:
        201:
          description: Document created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/article"

  /blog/{ID}:
    get:
      summary: Retrieve a specific document
      description: Retrieves a specific document based on its ID
      parameters:
        - in: path
          name: ID
          required: true
          description: MongoDB ID
          schema:
            type: string
      responses:
        200:
          description: A document in the format of a JSON object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/article"
    put:
      summary: Update a specific document
      description: Updates a specific document based on its ID
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: ID
          required: true
          description: MongoDB ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/article"
      responses:
        200:
          description: Successfully updated!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/article"
    delete:
      summary: Delete a specific ID
      description: Deletes a specific document based on its ID
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: ID
          required: true
          description: MongoDB ID
          schema:
            type: string
      responses:
        200:
          description: Successfully deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/article"
