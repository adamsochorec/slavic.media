name: Test and Deploy

# This workflow gets triggered on every push to the specific branch
on:
  push:
    branches: [main]

jobs:
  # Check which parts of the repository have changed
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    # Define outputs from this job
    outputs:
      backend_changed: ${{ steps.check-changes.outputs.backend }}
      frontend_changed: ${{ steps.check-changes.outputs.frontend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Use paths-filter action to check changed files
      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: check-changes
        with:
          # Define filters for backend and frontend changes
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
              - 'assets/**'

  # Run backend tests only if backend has changes
  test-backend:
    name: Backend tests
    needs: changes
    # Run this job only if backend files were changed
    if: needs.changes.outputs.backend_changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      tests_passed: ${{ steps.set-result.outputs.tests_passed }}

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.JS ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: NPM install, build and test
        id: run-tests
        continue-on-error: true
        run: |
          cd backend
          npm install
          npm test
        env:
          DBHOST: ${{ secrets.DBHOST }}
          TOKEN_SECRET: ${{ secrets.TOKEN_SECRET }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}

      # Set output variable to track test success
      - name: Set test result
        id: set-result
        run: |
          if [ "${{ steps.run-tests.outcome }}" == "success" ]; then
            echo "tests_passed=true" >> $GITHUB_OUTPUT
          else
            echo "tests_passed=false" >> $GITHUB_OUTPUT
          fi

  slack-notification:
    name: Send notification to Dev channel
    needs: [changes, test-backend]
    if: |
      needs.changes.outputs.backend_changed == 'true' && 
      needs.test-backend.outputs.tests_passed == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: slack notify
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
            "text": "${{ needs.test-backend.outputs.tests_passed == 'true' && ':white_check_mark: *Job Passed!* ✅' || ':x: *Job Failed!* ❌' }}\n\n*Logs:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Click here to view workflow logs>"
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        if: always()

  # Deploy backend if backend changed AND tests passed
  deploy-backend:
    name: Deploy Backend
    needs: [changes, test-backend]
    # Only run if backend files changed and backend tests passed
    if: |
      needs.changes.outputs.backend_changed == 'true' && 
      needs.test-backend.outputs.tests_passed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy backend to production
        run: |
          curl -X POST "${{ secrets.BACKEND_DEPLOY_HOOK }}"

  # Run frontend tests only if frontend has changes
  test-frontend:
    name: Frontend tests
    needs: changes
    # Run this job only if backend files were changed
    if: needs.changes.outputs.frontend_changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      tests_passed: ${{ steps.set-result.outputs.tests_passed }}

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.JS ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: NPM install, build and test
        id: run-tests
        continue-on-error: true
        run: |
          cd frontend
          npm install
          npm test

      # Set output variable to track test success
      - name: Set test result
        id: set-result
        run: |
          if [ "${{ steps.run-tests.outcome }}" == "success" ]; then
            echo "tests_passed=true" >> $GITHUB_OUTPUT
          else
            echo "tests_passed=false" >> $GITHUB_OUTPUT
          fi

  # Deploy frontend only if tests passed (when no backend changes or backend tests passed)
  deploy-frontend-only:
    name: Deploy Frontend (No Backend Changes)
    needs: [changes, test-frontend]
    # Only run if frontend files changed and no backend files changed
    if: |
      needs.changes.outputs.frontend_changed == 'true' && 
      needs.test-frontend.outputs.tests_passed == 'true' &&
      needs.changes.outputs.backend_changed != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy frontend to production
        run: |
          curl -X POST "${{ secrets.FRONTEND_DEPLOY_HOOK }}"

  # Deploy frontend when backend also changed and tests passed
  deploy-frontend-with-backend:
    name: Deploy Frontend (With Backend Changes)
    needs: [changes, test-backend]
    # Only run if both frontend and backend changed, and backend tests passed
    if: |
      needs.changes.outputs.frontend_changed == 'true' && 
      needs.changes.outputs.backend_changed == 'true' &&
      needs.test-backend.outputs.tests_passed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy frontend to production
        run: |
          curl -X POST "${{ secrets.FRONTEND_DEPLOY_HOOK }}"
