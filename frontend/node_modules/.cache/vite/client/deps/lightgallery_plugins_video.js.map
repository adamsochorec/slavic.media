{
  "version": 3,
  "sources": ["../../../../src/plugins/video/lg-video-settings.ts", "../../../../src/lg-events.ts", "../../../../src/plugins/video/lg-video-utils.ts", "../../../../src/plugins/video/lg-video.ts"],
  "sourcesContent": ["import { PlayerParams } from './lg-video-utils';\n\nexport interface VideoSettings {\n    /**\n     * Enable/DIsable first video autoplay.\n     * @description Autoplay has to be managed using this setting.\n     * Autoplay in PlayerParams doesn't have any effect.\n     */\n    autoplayFirstVideo: boolean;\n\n    /**\n     * Change YouTube player parameters.\n     * You can find the list of YouTube player parameters from the following link\n     * <a href=\"https://developers.google.com/youtube/player_parameters\">YouTube player parameters</a>\n     * @example\n     * lightGallery(document.getElementById('lightGallery'), {\n     *     youTubePlayerParams: {\n     *         modestbranding : 1,\n     *         showinfo : 0,\n     *         controls : 0\n     *     }\n     * })\n     */\n    youTubePlayerParams: any;\n\n    /**\n     * Change Vimeo player parameters.\n     * You can find the list of vimeo player parameters from the following link\n     * <a href=\"https://developer.vimeo.com/player/embedding#universal-parameters\">Vimeo player parameters</a>\n     * @example\n     * lightGallery(document.getElementById('lightGallery'), {\n     *     vimeoPlayerParams: {\n     *         byline : 0,\n     *         portrait : 0,\n     *         color : 'CCCCCC'\n     *     }\n     * })\n     */\n    vimeoPlayerParams: PlayerParams;\n\n    /**\n     * Change Wistia player parameters.\n     * You can find the list of Wistia player parameters from the following link\n     * <a href=\"https://wistia.com/support/developers/embed-options#using-embed-options\">Vimeo player parameters</a>\n     */\n    wistiaPlayerParams: any;\n\n    /**\n     * Go to next slide when video is ended\n     * Note - this doesn't work with YouTube videos at the moment\n     */\n    gotoNextSlideOnVideoEnd: boolean;\n\n    /**\n     * Autoplay video on slide change\n     * @description Make sure you set preload:\"none\"\n     */\n    autoplayVideoOnSlide: boolean;\n\n    /**\n     * Enbale videojs custom video player\n     * <div class=\"alert alert-info\" role=\"alert\">\n     *     <b>Dependency</b> - You need to include <a href=\"https://videojs.com/\">videoJs</a> on your document to enable videojs player\n     * </div>\n     */\n    videojs: boolean;\n\n    /**\n     * Class name of the videojs theme\n     * You need to include the theme stylesheet on your document. <a href=\"https://videojs.com/getting-started/#home-page-themes\" target=\"_blank\">More info</a>\n     * @version V2.5.0\n     */\n    videojsTheme: string;\n\n    /**\n     * Videojs player options\n     */\n    videojsOptions: any;\n}\nexport const videoSettings: VideoSettings = {\n    autoplayFirstVideo: true,\n    youTubePlayerParams: false,\n    vimeoPlayerParams: false,\n    wistiaPlayerParams: false,\n    gotoNextSlideOnVideoEnd: true,\n    autoplayVideoOnSlide: false,\n    videojs: false,\n    videojsTheme: '',\n    videojsOptions: {},\n};\n", "import { LightGallery } from './lightgallery';\nimport { VideoSource } from './plugins/video/types';\n\n/**\n * List of lightGallery events\n * All events should be documented here\n * Below interfaces are used to build the website documentations\n * */\nexport const lGEvents: {\n    [key: string]: string;\n} = {\n    afterAppendSlide: 'lgAfterAppendSlide',\n    init: 'lgInit',\n    hasVideo: 'lgHasVideo',\n    containerResize: 'lgContainerResize',\n    updateSlides: 'lgUpdateSlides',\n    afterAppendSubHtml: 'lgAfterAppendSubHtml',\n    beforeOpen: 'lgBeforeOpen',\n    afterOpen: 'lgAfterOpen',\n    slideItemLoad: 'lgSlideItemLoad',\n    beforeSlide: 'lgBeforeSlide',\n    afterSlide: 'lgAfterSlide',\n    posterClick: 'lgPosterClick',\n    dragStart: 'lgDragStart',\n    dragMove: 'lgDragMove',\n    dragEnd: 'lgDragEnd',\n    beforeNextSlide: 'lgBeforeNextSlide',\n    beforePrevSlide: 'lgBeforePrevSlide',\n    beforeClose: 'lgBeforeClose',\n    afterClose: 'lgAfterClose',\n    rotateLeft: 'lgRotateLeft',\n    rotateRight: 'lgRotateRight',\n    flipHorizontal: 'lgFlipHorizontal',\n    flipVertical: 'lgFlipVertical',\n    autoplay: 'lgAutoplay',\n    autoplayStart: 'lgAutoplayStart',\n    autoplayStop: 'lgAutoplayStop',\n};\n\n// Follow the below format for the event documentation\n// @method is the method name when event is used with Angular/React components\n\n/**\n * Fired only once when lightGallery is initialized\n * @name lgInit\n * @method onInit\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action on lightGallery initialization.\n *   // Init event returns the plugin instance that can be used to call any lightGalley public method\n *   let pluginInstance = null;\n *   lg.addEventListener('lgInit', (event) => {\n *      pluginInstance = event.detail.instance;\n *   });\n *   lightGallery(lg);\n * @see <a href=\"/docs/methods\">Methods<a>\n */\nexport interface InitDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired when the slide content has been inserted into it's slide container.\n * @name lgAfterAppendSlide\n * @method onAfterAppendSlide\n */\nexport interface AfterAppendSlideEventDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired immediately before opening the gallery\n * @name lgBeforeOpen\n * @method onBeforeOpen\n */\nexport interface BeforeOpenDetail {}\n\n/**\n * Fired immediately after opening the gallery\n * @name lgAfterOpen\n * @method onAfterOpen\n */\nexport interface AfterOpenDetail {}\n\n/**\n * Fired once the media inside the slide has been completely loaded .\n * @name lgSlideItemLoad\n * @method onSlideItemLoad\n */\nexport interface SlideItemLoadDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * For the first slide, lightGallery adds some delay for displaying the loaded slide item.\n     * This delay is required for the transition effect when the slide item is displayed\n     * Respect the delay when you use this event\n     */\n    delay: number;\n\n    // Will be true for the first slide\n    isFirstSlide: boolean;\n}\n\n/**\n * Fired immediately before each slide transition.\n * @name lgBeforeSlide\n * @method onBeforeSlide\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action before each slide transition\n *   lg.addEventListener('lgBeforeSlide', (event) => {\n *       const { index, prevIndex } = event.detail;\n *       alert(index, prevIndex);\n *   });\n *   lightGallery(lg);\n */\nexport interface BeforeSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired immediately after each slide transition.\n * @name lgAfterSlide\n * @method onAfterSlide\n */\nexport interface AfterSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired when the video poster is clicked.\n * @name lgPosterClick\n * @method onPosterClick\n */\nexport interface PosterClickDetail {}\n\n/**\n * Fired when the drag event to move to different slide starts.\n * @name lgDragStart\n * @method onDragStart\n */\nexport interface DragStartDetail {}\n\n/**\n * Fired periodically during the drag operation.\n * @name lgDragMove\n * @method onDragMove\n */\nexport interface DragMoveDetail {}\n\n/**\n * Fired when the user has finished the drag operation\n * @name lgDragEnd\n * @method onDragEnd\n */\nexport interface DragEndDetail {}\n\n/**\n * Fired immediately before the start of the close process.\n * @name lgBeforeClose\n * @method onBeforeClose\n */\nexport interface BeforeCloseDetail {}\n\n/**\n * Fired immediately once lightGallery is closed.\n * @name lgAfterClose\n * @method onAfterClose\n */\nexport interface AfterCloseDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired immediately before each \"next\" slide transition\n * @name lgBeforeNextSlide\n * @method onBeforeNextSlide\n */\nexport interface BeforeNextSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired immediately before each \"prev\" slide transition\n * @name lgBeforePrevSlide\n * @method onBeforePrevSlide\n */\nexport interface BeforePrevSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired when the sub-html content (ex : title/ description) has been appended into the slide.\n * @name lgAfterAppendSubHtml\n * @method onAfterAppendSubHtml\n */\nexport interface AfterAppendSubHtmlDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the lightGallery container has been resized.\n * @name lgContainerResize\n * @method onContainerResize\n */\nexport interface ContainerResizeDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when lightGallery detects video slide\n * @name lgHasVideo\n * @method onHasVideo\n */\nexport interface HasVideoDetail {\n    /**\n     * Index of the slide,\n     */\n    index: number;\n    /**\n     * Video source\n     */\n    src: string;\n    /**\n     * HTML5 video source if available\n     * <p>\n       HTML5 video source = source: {\n            src: string;\n            type: string;\n        }[];\n        attributes: HTMLVideoElement;\n     * </p>\n     */\n    html5Video: VideoSource;\n    /**\n     * True if video has poster\n     */\n    hasPoster: boolean;\n}\n\n/**\n * Fired when the image is rotated in anticlockwise direction\n * @name lgRotateLeft\n * @method onRotateLeft\n */\nexport interface RotateLeftDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is rotated in clockwise direction\n * @name lgRotateRight\n * @method onRotateRight\n */\nexport interface RotateRightDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is flipped horizontally\n * @name lgFlipHorizontal\n * @method onFlipHorizontal\n */\nexport interface FlipHorizontalDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is flipped vertically\n * @name lgFlipVertical\n * @method onFlipVertical\n */\nexport interface FlipVerticalDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n", "import { VideoInfo } from '../../types';\nexport type PlayerParams = Record<string, string | number | boolean> | boolean;\n\nexport type YouTubeParams = {\n    [x: string]: string | number | boolean;\n};\n\nexport const param = (obj: YouTubeParams): string => {\n    return Object.keys(obj)\n        .map(function (k) {\n            return encodeURIComponent(k) + '=' + encodeURIComponent(obj[k]);\n        })\n        .join('&');\n};\nexport const paramsToObject = (url: string): YouTubeParams => {\n    const paramas = url\n        .slice(1)\n        .split('&')\n        .map((p) => p.split('='))\n        .reduce((obj: any, pair) => {\n            const [key, value] = pair.map(decodeURIComponent);\n            obj[key] = value;\n            return obj;\n        }, {});\n    return paramas;\n};\n\nexport const getYouTubeParams = (\n    videoInfo: VideoInfo,\n    youTubePlayerParamsSettings: YouTubeParams | false,\n): string => {\n    if (!videoInfo.youtube) return '';\n    const slideUrlParams = videoInfo.youtube[2]\n        ? paramsToObject(videoInfo.youtube[2])\n        : '';\n\n    // For youtube first params gets priority if duplicates found\n    const defaultYouTubePlayerParams = {\n        wmode: 'opaque',\n        autoplay: 0,\n        mute: 1,\n        enablejsapi: 1,\n    };\n\n    const playerParamsSettings = youTubePlayerParamsSettings || {};\n\n    const youTubePlayerParams = {\n        ...defaultYouTubePlayerParams,\n        ...playerParamsSettings,\n        ...slideUrlParams,\n    };\n\n    const youTubeParams = `?${param(youTubePlayerParams)}`;\n    return youTubeParams;\n};\n\nexport const isYouTubeNoCookie = (url: string): boolean => {\n    return url.includes('youtube-nocookie.com');\n};\n\nexport const getVimeoURLParams = (\n    defaultParams: PlayerParams,\n    videoInfo?: VideoInfo,\n): string => {\n    if (!videoInfo || !videoInfo.vimeo) return '';\n    let urlParams = videoInfo.vimeo[2] || '';\n\n    const defaultVimeoPlayerParams = Object.assign(\n        {},\n        {\n            autoplay: 0,\n            muted: 1,\n        },\n        defaultParams,\n    );\n    let defaultPlayerParams =\n        defaultVimeoPlayerParams &&\n        Object.keys(defaultVimeoPlayerParams).length !== 0\n            ? param(defaultVimeoPlayerParams as any)\n            : '';\n\n    // Support private video\n    const urlWithHash = videoInfo.vimeo[0].split('/').pop() || '';\n    const urlWithHashWithParams = urlWithHash.split('?')[0] || '';\n    const hash = urlWithHashWithParams.split('#')[0];\n\n    const isPrivate = videoInfo.vimeo[1] !== hash;\n    if (isPrivate) {\n        urlParams = urlParams.replace(`/${hash}`, '');\n    }\n\n    urlParams =\n        urlParams[0] == '?' ? '&' + urlParams.slice(1) : urlParams || '';\n    const privateUrlParams = isPrivate ? `h=${hash}` : '';\n    defaultPlayerParams = privateUrlParams\n        ? `&${defaultPlayerParams}`\n        : defaultPlayerParams;\n\n    const vimeoPlayerParams = `?${privateUrlParams}${defaultPlayerParams}${urlParams}`;\n    return vimeoPlayerParams;\n};\n", "/**\n * Video module for lightGallery\n * Supports HTML5, YouTube, Vimeo, wistia videos\n *\n *\n * @ref Wistia\n * https://wistia.com/support/integrations/wordpress(How to get url)\n * https://wistia.com/support/developers/embed-options#using-embed-options\n * https://wistia.com/support/developers/player-api\n * https://wistia.com/support/developers/construct-an-embed-code\n * http://jsfiddle.net/xvnm7xLm/\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video\n * https://wistia.com/support/embed-and-share/sharing-videos\n * https://private-sharing.wistia.com/medias/mwhrulrucj\n *\n * @ref Youtube\n * https://developers.google.com/youtube/player_parameters#enablejsapi\n * https://developers.google.com/youtube/iframe_api_reference\n * https://developer.chrome.com/blog/autoplay/#iframe-delegation\n *\n * @ref Vimeo\n * https://stackoverflow.com/questions/10488943/easy-way-to-get-vimeo-id-from-a-vimeo-url\n * https://vimeo.zendesk.com/hc/en-us/articles/360000121668-Starting-playback-at-a-specific-timecode\n * https://vimeo.zendesk.com/hc/en-us/articles/360001494447-Using-Player-Parameters\n */\n\nimport { VideoSettings, videoSettings } from './lg-video-settings';\nimport { LightGallery } from '../../lightgallery';\nimport { lgQuery } from '../../lgQuery';\nimport {\n    CustomEventAfterSlide,\n    CustomEventHasVideo,\n    CustomEventSlideItemLoad,\n    VideoInfo,\n} from '../../types';\nimport { lGEvents } from '../../lg-events';\nimport { VideoSource } from './types';\nimport {\n    getVimeoURLParams,\n    getYouTubeParams,\n    isYouTubeNoCookie,\n    param,\n} from './lg-video-utils';\n\ndeclare let Vimeo: any;\ndeclare let videojs: any;\ndeclare global {\n    interface Window {\n        _wq: any;\n        Vimeo: any;\n    }\n}\nexport default class Video {\n    private core: LightGallery;\n    private settings: VideoSettings;\n    constructor(instance: LightGallery) {\n        // get lightGallery core plugin instance\n        this.core = instance;\n        this.settings = { ...videoSettings, ...this.core.settings };\n\n        return this;\n    }\n    init() {\n        /**\n         * Event triggered when video url found without poster\n         * Append video HTML\n         * Play if autoplayFirstVideo is true\n         */\n        this.core.LGel.on(\n            `${lGEvents.hasVideo}.video`,\n            this.onHasVideo.bind(this),\n        );\n\n        this.core.LGel.on(`${lGEvents.posterClick}.video`, () => {\n            const $el = this.core.getSlideItem(this.core.index);\n            this.loadVideoOnPosterClick($el);\n        });\n        this.core.LGel.on(\n            `${lGEvents.slideItemLoad}.video`,\n            this.onSlideItemLoad.bind(this),\n        );\n\n        // @desc fired immediately before each slide transition.\n        this.core.LGel.on(\n            `${lGEvents.beforeSlide}.video`,\n            this.onBeforeSlide.bind(this),\n        );\n\n        // @desc fired immediately after each slide transition.\n        this.core.LGel.on(\n            `${lGEvents.afterSlide}.video`,\n            this.onAfterSlide.bind(this),\n        );\n    }\n\n    /**\n     * @desc Event triggered when a slide is completely loaded\n     *\n     * @param {Event} event - lightGalley custom event\n     */\n    onSlideItemLoad(event: CustomEventSlideItemLoad): void {\n        const { isFirstSlide, index } = event.detail;\n\n        // Should check the active slide as well as user may have moved to different slide before the first slide is loaded\n        if (\n            this.settings.autoplayFirstVideo &&\n            isFirstSlide &&\n            index === this.core.index\n        ) {\n            // Delay is just for the transition effect on video load\n            setTimeout(() => {\n                this.loadAndPlayVideo(index);\n            }, 200);\n        }\n\n        // Should not call on first slide. should check only if the slide is active\n        if (\n            !isFirstSlide &&\n            this.settings.autoplayVideoOnSlide &&\n            index === this.core.index\n        ) {\n            this.loadAndPlayVideo(index);\n        }\n    }\n\n    /**\n     * @desc Event triggered when video url or poster found\n     * Append video HTML is poster is not given\n     * Play if autoplayFirstVideo is true\n     *\n     * @param {Event} event - Javascript Event object.\n     */\n    onHasVideo(event: CustomEventHasVideo): void {\n        const { index, src, html5Video, hasPoster } = event.detail;\n        if (!hasPoster) {\n            // All functions are called separately if poster exist in loadVideoOnPosterClick function\n\n            this.appendVideos(this.core.getSlideItem(index), {\n                src,\n                addClass: 'lg-object',\n                index,\n                html5Video,\n            });\n\n            // Automatically navigate to next slide once video reaches the end.\n            this.gotoNextSlideOnVideoEnd(src, index);\n        }\n    }\n\n    /**\n     * @desc fired immediately before each slide transition.\n     * Pause the previous video\n     * Hide the download button if the slide contains YouTube, Vimeo, or Wistia videos.\n     *\n     * @param {Event} event - Javascript Event object.\n     * @param {number} prevIndex - Previous index of the slide.\n     * @param {number} index - Current index of the slide\n     */\n    onBeforeSlide(event: CustomEvent): void {\n        if (this.core.lGalleryOn) {\n            const { prevIndex } = event.detail;\n            this.pauseVideo(prevIndex);\n        }\n    }\n\n    /**\n     * @desc fired immediately after each slide transition.\n     * Play video if autoplayVideoOnSlide option is enabled.\n     *\n     * @param {Event} event - Javascript Event object.\n     * @param {number} prevIndex - Previous index of the slide.\n     * @param {number} index - Current index of the slide\n     * @todo should check on onSlideLoad as well if video is not loaded on after slide\n     */\n    onAfterSlide(event: CustomEventAfterSlide): void {\n        const { index, prevIndex } = event.detail;\n        // Do not call on first slide\n        const $slide = this.core.getSlideItem(index);\n        if (this.settings.autoplayVideoOnSlide && index !== prevIndex) {\n            if ($slide.hasClass('lg-complete')) {\n                setTimeout(() => {\n                    this.loadAndPlayVideo(index);\n                }, 100);\n            }\n        }\n    }\n\n    loadAndPlayVideo(index: number): void {\n        const $slide = this.core.getSlideItem(index);\n        const currentGalleryItem = this.core.galleryItems[index];\n        if (currentGalleryItem.poster) {\n            this.loadVideoOnPosterClick($slide, true);\n        } else {\n            this.playVideo(index);\n        }\n    }\n\n    /**\n     * Play HTML5, Youtube, Vimeo or Wistia videos in a particular slide.\n     * @param {number} index - Index of the slide\n     */\n    playVideo(index: number) {\n        this.controlVideo(index, 'play');\n    }\n\n    /**\n     * Pause HTML5, Youtube, Vimeo or Wistia videos in a particular slide.\n     * @param {number} index - Index of the slide\n     */\n    pauseVideo(index: number) {\n        this.controlVideo(index, 'pause');\n    }\n\n    getVideoHtml(\n        src: any,\n        addClass: any,\n        index: number,\n        html5Video: VideoSource,\n    ): string {\n        let video = '';\n        const videoInfo =\n            this.core.galleryItems[(index as unknown) as number]\n                .__slideVideoInfo || {};\n        const currentGalleryItem = this.core.galleryItems[index];\n        let videoTitle = currentGalleryItem.title || currentGalleryItem.alt;\n        videoTitle = videoTitle ? 'title=\"' + videoTitle + '\"' : '';\n        const commonIframeProps = `allowtransparency=\"true\"\n            frameborder=\"0\"\n            scrolling=\"no\"\n            allowfullscreen\n            mozallowfullscreen\n            webkitallowfullscreen\n            oallowfullscreen\n            msallowfullscreen`;\n\n        if (videoInfo.youtube) {\n            const videoId = 'lg-youtube' + index;\n\n            const youTubeParams = getYouTubeParams(\n                videoInfo,\n                this.settings.youTubePlayerParams,\n            );\n\n            const isYouTubeNoCookieURL = isYouTubeNoCookie(src);\n\n            const youtubeURL = isYouTubeNoCookieURL\n                ? '//www.youtube-nocookie.com/'\n                : '//www.youtube.com/';\n\n            video = `<iframe allow=\"autoplay\" id=${videoId} class=\"lg-video-object lg-youtube ${addClass}\" ${videoTitle} src=\"${youtubeURL}embed/${\n                videoInfo.youtube[1] + youTubeParams\n            }\" ${commonIframeProps}></iframe>`;\n        } else if (videoInfo.vimeo) {\n            const videoId = 'lg-vimeo' + index;\n            const playerParams = getVimeoURLParams(\n                this.settings.vimeoPlayerParams,\n                videoInfo,\n            );\n            video = `<iframe allow=\"autoplay\" id=${videoId} class=\"lg-video-object lg-vimeo ${addClass}\" ${videoTitle} src=\"//player.vimeo.com/video/${\n                videoInfo.vimeo[1] + playerParams\n            }\" ${commonIframeProps}></iframe>`;\n        } else if (videoInfo.wistia) {\n            const wistiaId = 'lg-wistia' + index;\n            let playerParams = param(this.settings.wistiaPlayerParams);\n            playerParams = playerParams ? '?' + playerParams : '';\n            video = `<iframe allow=\"autoplay\" id=\"${wistiaId}\" src=\"//fast.wistia.net/embed/iframe/${\n                videoInfo.wistia[4] + playerParams\n            }\" ${videoTitle} class=\"wistia_embed lg-video-object lg-wistia ${addClass}\" name=\"wistia_embed\" ${commonIframeProps}></iframe>`;\n        } else if (videoInfo.html5) {\n            let html5VideoMarkup = '';\n            for (let i = 0; i < html5Video.source.length; i++) {\n                const type = html5Video.source[i].type;\n                const typeAttr = type ? `type=\"${type}\"` : '';\n                html5VideoMarkup += `<source src=\"${html5Video.source[i].src}\" ${typeAttr}>`;\n            }\n            if (html5Video.tracks) {\n                for (let i = 0; i < html5Video.tracks.length; i++) {\n                    let trackAttributes = '';\n                    const track = html5Video.tracks[i];\n                    Object.keys(track || {}).forEach(function (key) {\n                        trackAttributes += `${key}=\"${(track as any)[key]}\" `;\n                    });\n                    html5VideoMarkup += `<track ${trackAttributes}>`;\n                }\n            }\n\n            let html5VideoAttrs = '';\n            const videoAttributes = html5Video.attributes || {};\n            Object.keys(videoAttributes || {}).forEach(function (key) {\n                html5VideoAttrs += `${key}=\"${(videoAttributes as any)[key]}\" `;\n            });\n            video = `<video class=\"lg-video-object lg-html5 ${\n                this.settings.videojs && this.settings.videojsTheme\n                    ? this.settings.videojsTheme + ' '\n                    : ''\n            } ${this.settings.videojs ? ' video-js' : ''}\" ${html5VideoAttrs}>\n                ${html5VideoMarkup}\n                Your browser does not support HTML5 video.\n            </video>`;\n        }\n\n        return video;\n    }\n\n    /**\n     * @desc - Append videos to the slide\n     *\n     * @param {HTMLElement} el - slide element\n     * @param {Object} videoParams - Video parameters, Contains src, class, index, htmlVideo\n     */\n    appendVideos(\n        el: lgQuery,\n        videoParams: {\n            src: string;\n            addClass: string;\n            index: number;\n            html5Video: any;\n        },\n    ): any {\n        const videoHtml = this.getVideoHtml(\n            videoParams.src,\n            videoParams.addClass,\n            videoParams.index,\n            videoParams.html5Video,\n        );\n        el.find('.lg-video-cont').append(videoHtml);\n        const $videoElement = el.find('.lg-video-object').first();\n        if (videoParams.html5Video) {\n            $videoElement.on('mousedown.lg.video', (e) => {\n                e.stopPropagation();\n            });\n        }\n        if (\n            this.settings.videojs &&\n            this.core.galleryItems[videoParams.index].__slideVideoInfo?.html5\n        ) {\n            try {\n                return videojs(\n                    $videoElement.get(),\n                    this.settings.videojsOptions,\n                );\n            } catch (e) {\n                console.error(\n                    'lightGallery:- Make sure you have included videojs',\n                );\n            }\n        }\n    }\n\n    gotoNextSlideOnVideoEnd(src: any, index: number) {\n        const $videoElement = this.core\n            .getSlideItem(index)\n            .find('.lg-video-object')\n            .first();\n        const videoInfo = this.core.galleryItems[index].__slideVideoInfo || {};\n        if (this.settings.gotoNextSlideOnVideoEnd) {\n            if (videoInfo.html5) {\n                $videoElement.on('ended', () => {\n                    this.core.goToNextSlide();\n                });\n            } else if (videoInfo.vimeo) {\n                try {\n                    // https://github.com/vimeo/player.js/#ended\n                    new Vimeo.Player($videoElement.get()).on('ended', () => {\n                        this.core.goToNextSlide();\n                    });\n                } catch (e) {\n                    console.error(\n                        'lightGallery:- Make sure you have included //github.com/vimeo/player.js',\n                    );\n                }\n            } else if (videoInfo.wistia) {\n                try {\n                    window._wq = window._wq || [];\n\n                    // @todo Event is gettign triggered multiple times\n                    window._wq.push({\n                        id: $videoElement.attr('id'),\n                        onReady: (video: {\n                            bind: (arg0: string, arg1: () => void) => void;\n                        }) => {\n                            video.bind('end', () => {\n                                this.core.goToNextSlide();\n                            });\n                        },\n                    });\n                } catch (e) {\n                    console.error(\n                        'lightGallery:- Make sure you have included //fast.wistia.com/assets/external/E-v1.js',\n                    );\n                }\n            }\n        }\n    }\n\n    controlVideo(index: number, action: string) {\n        const $videoElement = this.core\n            .getSlideItem(index)\n            .find('.lg-video-object')\n            .first();\n        const videoInfo = this.core.galleryItems[index].__slideVideoInfo || {};\n\n        if (!$videoElement.get()) return;\n\n        if (videoInfo.youtube) {\n            try {\n                ($videoElement.get() as any).contentWindow.postMessage(\n                    `{\"event\":\"command\",\"func\":\"${action}Video\",\"args\":\"\"}`,\n                    '*',\n                );\n            } catch (e) {\n                console.error(`lightGallery:- ${e}`);\n            }\n        } else if (videoInfo.vimeo) {\n            try {\n                new Vimeo.Player($videoElement.get())[action]();\n            } catch (e) {\n                console.error(\n                    'lightGallery:- Make sure you have included //github.com/vimeo/player.js',\n                );\n            }\n        } else if (videoInfo.html5) {\n            if (this.settings.videojs) {\n                try {\n                    (videojs($videoElement.get()) as any)[action as any]();\n                } catch (e) {\n                    console.error(\n                        'lightGallery:- Make sure you have included videojs',\n                    );\n                }\n            } else {\n                ($videoElement.get() as any)[action]();\n            }\n        } else if (videoInfo.wistia) {\n            try {\n                window._wq = window._wq || [];\n\n                // @todo Find a way to destroy wistia player instance\n                window._wq.push({\n                    id: $videoElement.attr('id'),\n                    onReady: (video: any) => {\n                        video[action]();\n                    },\n                });\n            } catch (e) {\n                console.error(\n                    'lightGallery:- Make sure you have included //fast.wistia.com/assets/external/E-v1.js',\n                );\n            }\n        }\n    }\n\n    loadVideoOnPosterClick($el: lgQuery, forcePlay?: boolean): void {\n        // check slide has poster\n        if (!$el.hasClass('lg-video-loaded')) {\n            // check already video element present\n            if (!$el.hasClass('lg-has-video')) {\n                $el.addClass('lg-has-video');\n\n                let _html;\n\n                const _src = this.core.galleryItems[this.core.index].src;\n                const video = this.core.galleryItems[this.core.index].video;\n                if (video) {\n                    _html =\n                        typeof video === 'string' ? JSON.parse(video) : video;\n                }\n\n                const videoJsPlayer = this.appendVideos($el, {\n                    src: _src as string,\n                    addClass: '',\n                    index: this.core.index,\n                    html5Video: _html,\n                });\n\n                this.gotoNextSlideOnVideoEnd(_src, this.core.index);\n\n                const $tempImg = $el.find('.lg-object').first().get();\n\n                // @todo make sure it is working\n                $el.find('.lg-video-cont').first().append($tempImg);\n                $el.addClass('lg-video-loading');\n\n                videoJsPlayer &&\n                    videoJsPlayer.ready(() => {\n                        videoJsPlayer.on('loadedmetadata', () => {\n                            this.onVideoLoadAfterPosterClick(\n                                $el,\n                                this.core.index,\n                            );\n                        });\n                    });\n\n                $el.find('.lg-video-object')\n                    .first()\n                    .on('load.lg error.lg loadedmetadata.lg', () => {\n                        setTimeout(() => {\n                            this.onVideoLoadAfterPosterClick(\n                                $el,\n                                this.core.index,\n                            );\n                        }, 50);\n                    });\n            } else {\n                this.playVideo(this.core.index);\n            }\n        } else if (forcePlay) {\n            this.playVideo(this.core.index);\n        }\n    }\n    onVideoLoadAfterPosterClick($el: lgQuery, index: number): void {\n        $el.addClass('lg-video-loaded');\n        this.playVideo(index);\n    }\n    destroy(): void {\n        this.core.LGel.off('.lg.video');\n        this.core.LGel.off('.video');\n    }\n}\n"],
  "mappings": "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",
  "names": ["Video", "i"]
}
